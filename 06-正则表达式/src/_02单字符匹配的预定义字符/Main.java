package _02单字符匹配的预定义字符;

public class Main {
	public static void main(String[] args) {
		/*
		 * 1、.：代表任意一个单字符（字母数字下划线￥$等乱七八糟只要你能敲出来的单字符都是）
		 * 2、\w：代表任意一个单词字符（即字母数字下划线），完全等价于[a-zA-z_0-9]，word单词，在老外的眼中字母数字下划线可作为单词的组成部分
		 * 3、\W：\w的取反，代表任意一个非单词字符（即除了字母数字下划线以外的任意一个单字符），完全等价于[^a-zA-z_0-9]或[^\w]
		 * 4、\d：代表任意一个0~9的数字字符，完全等价于[0-9]，digit数字
		 * 5、\D：\d的取反，代表任意一个非0~9的数字、其它单字符（字母下划线￥$%等乱七八糟），完全等价于[^0-9]或[^\d]
		 * 6、\s：代表任意一个空白字符（space、tab、回车、换行、换页），完全等价于[ \t\r\n\f]五个字符（第一个是space的空格字符）
		 * 7、\S：\s的取反，代表任意一个非空白字符
		 * 
		 * 8、那如果我们就想匹配有特殊作用的字符怎么办呢？加\\
		 * 比如我们就想匹配.这个字符，那你正则表达式如果直接写成String regex = "\\D";，那肯定匹配成任意字符了你得写成String regex = "\\.";
		 * 其它的有特殊作用的字符也是这么搞，加\\就行了，比如String regex = "[123]";代表匹配1或者2或者3，但如果想匹配[123]这个字符串，就得写成String regex = "\\[123\\]"
		 */
		test();
	}
	
	public static void test() {
		// 定义一个正则表达式，Java里带斜杠的东西称为转移字符，所以得再写一个斜杠才是\D
		String regex = "\\D";
		// 定义一个字符串
		String str = "D";
		// 调用字符串的matches方法，看看这个字符串是否满足正则表达式的要求
		System.out.println(str.matches(regex));
	}
}
