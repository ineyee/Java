package _16嵌套类外部类顶级类._静态嵌套类;

import _16嵌套类外部类顶级类._静态嵌套类.Person;

public class Main {
	
	public static void main(String[] args) {
		Person person = new Person();
		person.run();
		
		// 静态嵌套类直接通过外部类的类名访问即可，这个类属性、类方法的使用是一样的
		Person.Cat cat = new Person.Cat();
		Person.Cat.nameString = "Tom";
		cat.run();
	}
	
}

/*
 * 静态嵌套类和它外部类的关系：
 * 
 * 1、前面我们说过内部类和它的外部类有内存上的关系，而静态嵌套类和它的外部类则完全没有内存上的关系，
 * 静态嵌套类完全就是一个自由自在的类，只不过在写代码的时候看起来是写在了一个类内部而已
 */

/*
 * 说到这我们就不得不问几个问题：
 * 1、定义类嘛，我一个.java文件对应定义一个类不就好了吗？为啥要把不同的类放在同一个文件里呢？
 * 其实其它语言也会有同样的问题，当我们考虑把多个类写在同一个文件里的时候，一般都是这几个类之间
 * 有特别紧密的联系，甚至这几个其中只有一个是对外公开的，其它几个类都是只在这个公开类内部私有使用的，
 * 这样代码的封装性就更好，代码的目录结构也更简单，代码的可读性和维护性也更好（别人一看就知道这个类
 * 只在内部使用，那精力就集中在这个类内部就可以了，就不用担心其它什么地方还需要修改啥的），就像
 * Person类里的那个Car类一样。
 * 
 * 2、好的，即便确实会有把多个类定义在同一个文件里的场景，那Java又为什么不直接把那些类定义在
 * 同一个文件里呢？而是把那些类定义成嵌套类呢？
 * 
 *	其它语言里一般会这么写，其它语言里可以用private修饰这个类，
 *	但是Java里只能是public和无修饰符修饰类，所以Java里一般不这么写，而是写成嵌套类，嵌套类就是类
 *	的成员了，可以用private修饰了
 *	class Car {
 *		public double price;
 *		public void run() {
 *			System.out.println("Car_" + price + "_run");
 *		}
 *	}
 * 
 * 3、好的，那我们在什么场景下会把一个类定义成内部类呢？什么情况下又会把一个类定义成静态嵌套类呢？
 * 我们知道内部类和静态嵌套类分别丢掉了什么自由、又相应的获得了那些特殊权限，所以我们就可以根据需求想定义成什么就
 * 定义成什么，但是建议在定义嵌套类的时候优先定义成静态嵌套类，如果静态嵌套类不满足你的需求，再改成内部类，毕竟内部类
 * 必须得外部类的实例才能使用，这很麻烦的，这是Java官方的建议。
 */