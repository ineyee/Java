package _13如何手动初始化类的属性;

public class Person {
	/*
	 * 编译器会自动为未初始化的属性赋一个默认值，比如下面的age会默认为0，name会默认为null
	 * 
	 * 但结合Swift和Dart空安全的编程经验来说，我倾向于不要让编译器给属性赋默认值，而是我们主动地
	 * 去给每一个属性赋初始值，为什么这么说呢？比方说name赋值成了个null，那在Java里null一调用方
	 * 法就崩，这多不安全，而Swift和Dart里就通过语法层面直接规避掉这种崩的情况了。
	 */
	
	/*
	 * 那我们如何手动给类的属性赋初始值呢？
	 * 1、在定义属性的时候能直接赋初始值就直接赋初始值，这主要针对的是那些方便直接赋初始值的类型
	 * 2、在初始化代码块里赋初始值，这主要针对的是那些不方便直接赋初始值的类型，比方说初始话一个回调类型的函数
	 * 要一坨代码，写在外面不好看
	 */
	public int age = 0;
	public String name = "";
	/*
	 * 所谓初始化代码块就是直接在类里面写这么一对大括号
	 * 
	 * 编译器会自动把这个初始化代码块里的代码搬到每个构造方法里第一句代码的位置去执行，正因为如此所以我们每创建
	 * 一个对象（对象在创建的时候肯定都会走构造方法嘛）都会执行一遍初始化代码块的代码，这样就能给新创建出来的对象
	 * 的属性都赋上初始值了
	 * 
	 * 初始化代码块可以存在多个，执行顺序就是我们写的顺序
	 */
	{
		
	}
	{
		
	}
	
	/*
	 * 手动给类属性赋初始值也是同理的
	 * 1、在定义类属性的时候
	 * 2、在静态初始化代码块里
	 */
	public static int count = 0;
	/*
	 * 所谓静态初始化代码块就是直接在类里面写这么一对大括号前面加个static修饰即可
	 * 
	 * 
	 * 但是静态初始化代码块只会在这个类第一次被用到的时候（而非加载到内存的时候）执行一次，以后永远不会再执行，也就是说
	 * 一个类的静态初始化代码块在程序的整个生命周期中最多只会执行一次
	 * 
	 * 初始化代码块可以存在多个，执行顺序就是我们写的顺序
	 */
	static {
		
	}
	static {
		
	}
}
