package _27匿名类;

/*
 * 一、匿名类是什么？
 * 顾名思义，匿名类指的就是没有名字的类，它跟普通的类没什么区别，只是没有名字 + 不能定义类成员而已。
 * 
 * 匿名类的格式为：
 * {
 * 	// 在这个大括号里定义匿名类的属性和方法
 * }
 * 
 * 对照普通类的格式：
 * class NormalClass {
 * 	// 在这个大括号里定义普通类的属性和方法
 * }
 * 
 * 可见匿名类和普通类的区别就在于普通类是用“class 类名 {}”来定义一个类的，
 * 而匿名类则没有名字、直接是用“{}”来定义一个类的，也正是因为匿名类没有名字，
 * 所以我们在定义匿名类的同时就必须实例化掉它，否则以后没名字你怎么使用它呢。
 * 所以在实际的开发中我们用到匿名类时，更常见的写法为：
 * new 接口名()||抽象类名() {
 * 	// 在这个大括号里定义匿名类的属性和方法
 * }
 * 当然如果你想用一个变量持有匿名类实例化出来的对象，写法为：
 * 接口名||抽象类名 对象名 = new 接口名()||抽象类名() {
 * 	// 在这个大括号里定义匿名类的属性和方法
 * }
 * 或者你想把匿名类作为函数的参数传递，写法为：
 * void func(接口名||抽象类名 形参名) {}，我们可以直接把匿名类传递给这个形参
 * 
 * 以上三种写法在实际开发中都是非常常见的，主要体现的就是匿名类在Java里是一等公民，
 * 我们知道接口和抽象类是不能直接实例化的，也就是说我们的代码里不应该出现“new 接口名();”或者“new 抽象类名();”这样的写法，
 * 但在定义匿名类后立即使用匿名类时是允许的、而且必须这么写。
 */

/*
 * 二、匿名类的使用场景，以及我们为什么要使用匿名类？
 * 1、当接口的实现类或者抽象类的子类，在整个项目中只有一个地方在使用，那我们就建议使用匿名类
 * 
 * 因为这种情况下使用匿名类可以减少项目类的数量以及项目目录的复杂结构，因为整个项目中不会再有
 * 别的地方使用这个类了，也就是说这个类不存在多个地方复用的情况，那索性就不专门创建这么个类了
 * 
 * 例子：见example1
 * 
 * 2、单纯地代码传递和回调，这个时候我们就得使用匿名类
 * 
 * 其它语言比如Swift和Dart里函数都是一等公民，所以我们完全可以通过匿名函数的方式来实现代码传递，就算
 * 是OC里虽然函数不是一等公民，但也提供了Block这种对象来帮很简单地实现代码传递，而Java里函数不是一等
 * 公民，也没有提供Block那种数据类型，所以就转而让我们使用匿名类这种技术来实现代码传递，所有语言里类肯
 * 定是一等公民喽，这种做法当然感觉写起来不如直接传递函数那么方便，但也正因为传递的是一个类，而一个类里
 * 又能定义很多方法，所以好处就是多个相关联的方法可以通过传递一个类来搞定，而不用搞得一个方法的参数列表
 * 那么多
 * 
 * 例子：见example2
 */

public class Main {

}
