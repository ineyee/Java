package _27匿名类;

/*
 * 一、匿名类是什么？
 * 顾名思义，匿名类指的就是没有名字的类，它跟普通的类没什么区别，只是没有名字 + 不能定义类成员而已。
 * 
 * 匿名类的格式为：
 * {
 * 	// 在这个大括号里定义匿名类的属性和方法
 * }
 * 
 * 对照普通类的格式：
 * class NormalClass {
 * 	// 在这个大括号里定义普通类的属性和方法
 * }
 * 
 * 可见匿名类和普通类的区别就在于普通类是用“class 类名 {}”来定义一个类的，
 * 而匿名类则没有名字、直接是用“{}”来定义一个类的，也正是因为匿名类没有名字，
 * 所以我们在定义匿名类的同时就必须实例化掉它，否则以后没名字你怎么使用它呢。
 * 所以在实际的开发中我们用到匿名类时，更常见的写法为：
 * new 接口名()||抽象类名() {
 * 	// 在这个大括号里定义匿名类的属性和方法
 * }
 * 当然如果你想用一个变量持有匿名类实例化出来的对象，写法为：
 * 接口名||抽象类名 对象名 = new 接口名()||抽象类名() {
 * 	// 在这个大括号里定义匿名类的属性和方法
 * }
 * 
 * 以上两种写法在实际开发中都是非常常见的，
 * 我们知道接口和抽象类是不能直接实例化的，也就是说我们的代码里不应该出现“new 接口名();”或者“new 抽象类名();”这样的写法，
 * 但在定义匿名类后立即使用匿名类时是允许的、而且必须这么写。
 */

/*
 * 二、匿名类的使用场景，以及我们为什么要使用匿名类？
 * 1、当接口的实现类或者抽象类的子类，在整个项目中只有一个地方在使用，那我们就建议使用匿名类，
 * 因为这种情况下使用匿名类可以减少项目类的数量以及项目目录的复杂结构，因为整个项目中不会再有
 * 别的地方使用这个类了，也就是说这个类不存在多个地方复用的情况，那索性就不专门创建这么个类了。
 * 例子：见example1
 */

public class Main {

}
