package _20接口;

/*
 * 一、什么是接口？
 * 在代码层面，接口体现为一系列抽象方法的集合，也就是说接口只负责定义方法，不负责实现方法，而是交由任何想实现这些方法的类自己去实现。
 * 说到这里，我们插一句，Java里接口的概念其实是照抄OC里协议的概念，OC里的协议不就是一堆方法的集合嘛，然后那些类想要实现这些方法就去遵守协议并实现。
 * 只不过OC协议里的方法可以被声明为optional可选实现和required必须实现，而Java接口里的方法则都是必须实现的，当然Java8之后提供了default关键字，
 * 我们可以在接口里为某个方法提供一个默认的实现，那别的类就可以不必须实现这个方法了。
 *
 * 在面向对象层面，接口体现为一系列行为或者说一系列能力的集合（这些行为或者说能力对应到代码的世界里不就是方法嘛），这也是为什么Java规范里要求接口的
 * 名字都定义为Xxxable，这个名字代表的就是实现类能做接口里的行为或者说具备接口里的能力。
 * 
 * 可以看下example包里的例子理解理解。
 * 
 * 
 * 二、除了抽象方法，接口里还可以定义什么（这个也可以帮助我们决定什么时候使用接口，什么时候使用抽象类）：
 * 1、常量，即static final XXX这种常量
 * 2、嵌套类（内部类和静态嵌套类）
 * 3、类方法
 * 再不能定义其它东西了。
 * 
 * 注意：
 * 1、接口里所有定义的东西其实都是隐式public的，也就是说就算你不写public它也是public的，而且你还不能写成其它的修饰符，因为接口设计的初衷就是为了
 * 让别人实现的，你换了修饰符那别人还怎么实现
 * 2、抽象方法可以省略abstract，默认就是
 * 
 * 
 * 三、使用接口需注意：
 * 1、接口不能实例化，因为它里面的方法都是抽象方法，都没有实现，你实例化了去掉用没有实现的方法不就崩了嘛
 * 2、任何能使用类的地方都可以使用接口，接口也像个父类一样可以指向任何实现了这个接口的“子类”
 * 3、一个类可以implements一个或多个接口
 * 4、接口可以继承自其它接口（就像OC里的协议可以继承自其它协议一样)，并且继承在接口这里的体现是可以多继承的
 * 5、一个类可以同时继承自类A并实现接口B，但是extends A必须写在implements B前面，这是语法规定
 * 
 * 
 * 四、什么时候使用抽象类？什么时候使用接口？（！！！重点！！！重点！！！重点！！！）
 * 首先我们要明确的是抽象类和接口的用途都是用来存放子类或者说其它类公共的代码。
 * 那么在编写代码的时候，很多情况下我们发现使用抽象类也可以，使用接口也可以，的确使用它们俩都能实现同样的功能，
 * 但有的时候更应该使用抽象类，而有的时候则更应该使用接口，这样写出来的代码就不仅停留在实现了功能层面，而
 * 是更加具备编程思想、更加利于代码的阅读。那什么时候使用抽象类？什么时候使用接口？
 * 
 * 1、首要的依据就是看语义，其实抽象类和接口在语义上有本质的区别
 * 我们使用抽象类都是让子类去继承它，而使用接口则是让其它类去实现它，比如说：
 * A extends B，在语义上肯定是：A是B
 * A implements B，在语义上却是：A具备B里的能力或者说A会B里的行为
 * 
 * 我们举个例子，比如说：
 * Student和Teacher这两个类都有run的功能，那我们在为它们俩抽取公共代码的时候就更应该使用抽象类Person，
 * 因为从语义上来说Student和Teacher是同一类东西，并且它们都是人类。
 * 但是如果Student和Car这两个类都有run的功能，那我们在为它们俩抽取公共代码的时候就更应该是使用接口Runnable，
 * 而不是定义一个什么BaseObject之类古怪的抽象类让它俩继承（虽然真得可以这么做，但不是很好理解），因为从语义上
 * 来说Student和Car压根不是同一类东西、不同世界里的两个类，它们只是都具备run的能力而已。
 * 
 * 【！！！重点！！！】所以我们在为多个类抽取公共代码的时候，要使用抽象类还是接口，首要的依据就是看语义：【！！！重点！！！】
 * 【如果这多个类是紧密相关的同一类东西，那就直接使用抽象类；如果这多个类不是紧密相关的同一类东西，那就直接使用接口，当然如果接口
 * 不能满足我们的需求，那也可以破例改为使用抽象类，因为抽象类里能定义很多其它东西，而接口里能定义的东西则寥寥无几，所以说接口在更
 * 多的时候其实只是用来定义方法的，而抽象类里面就既可以有方法也可以有属性】
 * 说到这，可以回顾一下抽象类那一部分我们举的例子，RectangleElement、TriangleElement、CircleElement是紧密相关的一类东西，
 * 所以我们才给它们抽取了一个抽象父类GraphicsElement，确实它们都是图形嘛，同理FileElement、PdfElement也是紧密相关的一类东西，
 * 所以我们才给它们抽取了一个抽象父类FileElement，确实它们都是文件嘛。至此使用抽象类还是接口是满足我们的首要依据的，即首先看语义。
 * 
 * 2、其它的一些依据：
 * （1）需要除public以外的访问权限，那就只能使用抽象类，因为接口里只能是public权限
 * （2）如果需要定义实例变量、非final的类变量等东西，那就只能使用抽象类，因为接口里没法定义这些东西
 * 说到这，我们就可以继续说一下那个例子了，照理GraphicsElement和FileElement是不紧密相关的两类东西，我们在为它俩抽取公共代码的时候
 * 应该使用接口才对，那为什么我们最终却定义了一个BaseElement这么个奇怪的类呢？因为我们需要用它来存储GraphicsElement和FileElement
 * 共有的实例变量，要是只有方法的话，我们肯定就用接口了，BaseElement是什么玩意嘛，现实世界里连个抽象的概念都对应不上，代码不易理解。
 */
